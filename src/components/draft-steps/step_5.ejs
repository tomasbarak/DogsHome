<style>
    #dog-filters-container {
        --nav-bar-height: 60px;
        --first-half-container-height: 50vh;
        position: absolute;
        top: var(--first-half-container-height);
        height: auto;
        width: fit-content;
        box-sizing: border-box;
        padding: 25px;
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        gap: 15px;
        align-items: flex-start;
        justify-items: center;
        padding-bottom: 80px;
        flex-direction: row;

        /*Center this div horizontaly*/
        margin-left: auto;
        margin-right: auto;
        left: 0;
        right: 0;
    }

    .filter-column {
        display: flex;
        flex-direction: column;
        width: 300px;

    }

    .filter-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        background-color: #fff;
        min-width: 150px;
        min-height: 100px;
        width: 300px;
        height: fit-content;
        border-radius: 8px;
        border: 1px solid #fff;
        box-sizing: border-box;
        padding: 15px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    .filter-section + .filter-section {
        margin-top: 25px;
    }

    .filter-section-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #000;
        margin-bottom: 10px;
    }

    input + .filter-label {
        margin-top: 10px;
    }
    .filter-label + input {
        margin-top: 10px;
    }

    .filter-input {
        width: 100%;
        height: 40px;
        border-radius: 8px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 5px;
        outline: none;
        box-sizing: border-box;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        transition: 0.3s;
    }
    .filter-input:focus {
        transition: 0.3s;
        border: 1px solid #079292;
        box-shadow: 0px 0px 10px rgba(7, 146, 146, 0.1);
    }

    .filter-label {
        width: 100%;
        text-align: left;
        font-size: 1rem;
        font-weight: bold;
        color: rgba(0, 0, 0, 0.75);
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

    .dropdown{
        width: 100%;
        height: 40px;
        border-radius: 8px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 5px;
        outline: none;
        box-sizing: border-box;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        color: #444;
        background-color: transparent;
        font-weight: normal;
        text-align: center;
    }

    .filter-label + .dropdown {
        margin-top: 10px;
    }

    .dropdown + .filter-label {
        margin-top: 10px;
    }

    .ui-menu  {
        background: white;
        list-style: none;
        padding: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        width: fit-content;
        max-width: calc(300px - 30px);
        max-height: 150px;
        overflow-y: scroll;
        top: calc(50vh - 50px + 30px + 50px + 15px);
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.1);
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
    }

    .ui-menu-item{
        transition: .25s;
        font-size: 1rem;
        width: 100%;
        height: 50px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 15px 0;
        box-sizing: border-box;
        user-select: none;
        cursor: pointer;
        color: #444;

    }


    .ui-menu-item + .ui-menu-item{
        border-top: 1px solid rgba(0, 0, 0, 0.1);
    }

    .ui-menu-item:hover{
        transition: .25s;
        background-color: rgba(0, 0, 0, 0.1);
        color: #079292;
    }

    .ui-helper-hidden-accessible{
        display: none;
    }
    .ui-state-active{
        color: #079292;
    }

    .text-search-container{
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .filter-label + .text-search-container {
        margin-top: 10px;
    }

    #draft-habits-input-container {
        height: 125px;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        border: 1.5px solid rgba(0, 0, 0, 0.1);
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        transition: border .5s;
    }

    #draft-habits-input-container:hover {
        transition: border .5s;
        border: 1.5px solid #079292;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
    }

    #draft-habits-input {
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        font-family: 'Lato', sans-serif;
        color: #444;
        font-weight: normal;
        outline: none !important;
        padding: 15px 15px 30px 15px;
        box-sizing: border-box;
        resize: none;
    }

    #draft-habits-input-counter{
        font-size: 0.7rem;
        color: #079292;
        font-weight: bold;
        font-family: 'Lato', sans-serif;
        margin-top: 15px;
        width: 100%;
        text-align: right;
    }

    #draft-observations-input-container {
        height: 125px;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        border: 1.5px solid rgba(0, 0, 0, 0.1);
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        transition: border .5s;
    }

    #draft-observations-input-container:hover {
        transition: border .5s;
        border: 1.5px solid #079292;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
    }

    #draft-observations-input {
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        font-family: 'Lato', sans-serif;
        color: #444;
        font-weight: normal;
        outline: none !important;
        padding: 15px 15px 30px 15px;
        box-sizing: border-box;
        resize: none;
    }

    #draft-observations-input-counter{
        font-size: 0.7rem;
        color: #079292;
        font-weight: bold;
        font-family: 'Lato', sans-serif;
        margin-top: 15px;
        width: 100%;
        text-align: right;
    }

    @media screen and (max-width: 600px) {
        .ui-menu  {
            background: white;
            list-style: none;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            width: fit-content;
            max-width: calc(300px - 30px);
            max-height: 150px;
            overflow-y: scroll;
            top: calc(50vh - 50px + 30px + 50px + 15px);
            box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.1);
            border-bottom-left-radius: 5px;
            border-bottom-right-radius: 5px;
        }
    }

    @media screen and (max-width: 980px) {
        #dog-filters-container {
            width: 665px;
        }
    }

    @media screen and (max-width: 665px) {
        #dog-filters-container {
            width: 350px;
        }
    }
    
</style>
<link rel="stylesheet" href="/stylesheets/external/color_palette_picker.css">
<div class="first-half-container">
    <h1 class="create-title">Ingresá las características del perro</h1>
</div>
<div id="dog-filters-container">
    <div class="filter-column">
        <div class="filter-section" id="age-section">
            <a class="filter-section-title">Edad</a>
            <label for="age-years" class="filter-label">Años</label>
            <input value="0" oninput="validity.valid||(value=0);" step="1" type="number" id="draft-age-years" min="0" max="25" class="filter-input">
            <label for="age-months" class="filter-label">Meses</label>
            <input value="0" oninput="validity.valid||(value=0);" step="1" type="number" id="draft-age-months" min="0" max="11" class="filter-input">
            <label class="filter-label" style="color: #079292" id="age-final"></label>
        </div>
        <div class="filter-section" id="personality-section">
            <a class="filter-section-title">Personalidad</a>
            <label class="filter-label">Amigable con gatos</label>
            <select name="cat-friendly" class="dropdown" id="draft-cat-friendly-dropdown">
                <option disabled="" selected="" value="">Seleccionar...</option>
                <option value="0">No</option>
                <option value="1">Sí</option>
                <option value="2">No estoy seguro</option>
            </select>
            <label class="filter-label">Amigable con perros</label>
            <select name="dog-friendly" class="dropdown" id="draft-dog-friendly-dropdown">
                <option disabled="" selected="" value="">Seleccionar...</option>
                <option value="0">No</option>
                <option value="1">Sí</option>
                <option value="2">No estoy seguro</option>
            </select>
            <label class="filter-label">Amigable con niños</label>
            <select name="child-friendly" class="dropdown" id="draft-child-friendly-dropdown">
                <option disabled="" selected="" value="">Seleccionar...</option>
                <option value="0">No</option>
                <option value="1">Sí</option>
                <option value="2">No estoy seguro</option>
            </select>
        </div>
    </div>
    
    <div class="filter-column">
        <div class="filter-section" id="physical-characteristics-section">
            <a class="filter-section-title">Características físicas</a>
            <label class="filter-label">Sexo</label>
            <select name="Sex" class="dropdown" id="draft-sex-dropdown">
                <option disabled="" selected="" value="">Sexo...</option>
                <option value="0">Macho</option>
                <option value="1">Hembra</option>
            </select>
            <label class="filter-label">Color (aproximado)</label>
            <select name="Color" class="dropdown" id="draft-color-dropdown">
                <option disabled="" selected="" value="">Color...</option>
                <option value="0">Blanco</option>
                <option value="1">Gris</option>
                <option value="2">Negro</option>
                <option value="3">Marrón</option>
                <option value="4">Colorado</option>
                <option value="5">Mixto</option>
            </select>
            <label class="filter-label">Tamaño</label>
            <select name="size" class="dropdown" id="draft-size-dropdown">
                <option disabled="" selected="" value="">Tamaño...</option>
                <option value="0">Muy pequeño</option>
                <option value="1">Pequeño</option>
                <option value="2">Mediano</option>
                <option value="3">Grande</option>
                <option value="4">Muy grande</option>
            </select>
            <label for="age-months" class="filter-label">Peso (kg.)</label>
            <input oninput="validity.valid||(value=0);" type="number" id="draft-weight-input" placeholder="Ingresar peso en kg..." step=".01" min="0" max="99" class="filter-input">
            <label class="filter-label">Raza</label>
            <div class="text-search-container " id="departamento">
                <input onfocus="$('#draft-breed-input').autocomplete('search', this.value)" type="text" placeholder="Escribir raza..." id="draft-breed-input" class="filter-input">
            </div>
        </div>
        <div class="filter-section" id="health-section">
            <a class="filter-section-title">Salud</a>
            <label class="filter-label">Vacunado</label>
            <select name="vaccinated" class="dropdown" id="draft-vaccinated-dropdown">
                <option disabled="" selected="" value="">Seleccionar...</option>
                <option value="0">No vacunado</option>
                <option value="1">Vacunación incompleta</option>
                <option value="2">Vacunación completa</option>
                <option value="3">No estoy seguro</option>
            </select>
            <label class="filter-label">Desparasitado</label>
            <select name="dewormed" class="dropdown" id="draft-dewormed-dropdown">
                <option disabled="" selected="" value="">Seleccionar...</option>
                <option value="0">No</option>
                <option value="1">Si</option>
                <option value="2">No estoy seguro</option>
            </select>
            <label class="filter-label">Castrado</label>
            <select name="castrated" class="dropdown" id="draft-castrated-dropdown">
                <option disabled="" selected="" value="">Seleccionar...</option>
                <option value="0">No</option>
                <option value="1">Si</option>
            </select>
        </div>
    </div>
    
    <div class="filter-column">
        <div class="filter-section" id="habits-section">
            <a class="filter-section-title">Hábitos</a>
            <div id="draft-habits-input-container">
                <textarea name="habitos" id="draft-habits-input" oninput="updateCounter('draft-habits')"></textarea>
            </div>
            <a id="draft-habits-input-counter">0/140</a>
        </div>
        <div class="filter-section" id="observations-section">
            <a class="filter-section-title">Observaciones</a>
            <div id="draft-observations-input-container">
                <textarea name="observaciones" id="draft-observations-input" oninput="updateCounter('draft-observations')"></textarea>
            </div>
            <a id="draft-observations-input-counter">0/140</a>
        </div>
    </div>
    
</div>
<script>
    function requestBreeds() {
        return new Promise((resolve, reject) => {
            axios.get(`https://${window.location.host}/other/breeds/breeds.json`).then(function (response) {
                resolve(response);
            }).catch(function (error) {
                reject(error);
            });
        })
    }

    requestBreeds().then((raw_res) => {
        let data = raw_res.data;
        window.breeds = data;

        $("#draft-breed-input").autocomplete({
            source: data,
            position: {  collision: "flip"  },
            minLength: 0,
        }).focus(function () {
            $(this).autocomplete("search");
        });
    })
    
    const setAgeFinalLabel = (ageYears, ageMonths) => {
        const ageFinalLabel = document.querySelector('#age-final');
        ageYears = Number(ageYears);
        ageMonths = Number(ageMonths);
        if(ageMonths > 0 || ageYears > 0) {
            if(ageYears > 0 && ageMonths > 0) {
                if(ageYears > 1){
                    if(ageMonths > 1){
                        ageFinalLabel.innerHTML = `${ageYears} años y ${ageMonths} meses`;
                    } else {
                        ageFinalLabel.innerHTML = `${ageYears} años y ${ageMonths} mes`;
                    }
                } else {
                    if(ageMonths > 1){
                        ageFinalLabel.innerHTML = `${ageYears} año y ${ageMonths} meses`;
                    } else {
                        ageFinalLabel.innerHTML = `${ageYears} año y ${ageMonths} mes`;
                    }
                }
            } else if(ageYears > 0) {
                if(ageYears > 1) {
                    ageFinalLabel.innerHTML = `${ageYears} años`;
                } else {
                    ageFinalLabel.innerHTML = `${ageYears} año`;
                }
            } else {
                if(ageMonths > 1) {
                    ageFinalLabel.innerHTML = `${ageMonths} meses`;
                } else {
                    ageFinalLabel.innerHTML = `${ageMonths} mes`;
                }
            }
        } else {
            ageFinalLabel.innerHTML = '';
        }
    }

    document.querySelector('#draft-age-months').addEventListener('input', function (e) {
        const ageYears = document.querySelector('#draft-age-years').value;
        const ageMonths = e.target.value;

        setAgeFinalLabel(ageYears, ageMonths);
    });

    document.querySelector('#draft-age-years').addEventListener('input', function (e) {
        const ageYears = e.target.value;
        const ageMonths = document.querySelector('#draft-age-months').value;
        
        setAgeFinalLabel(ageYears, ageMonths);
    });

    const updateCounter = (counterName) => {
        const counter = document.getElementById(`${counterName}-input-counter`);
        const input = document.getElementById(`${counterName}-input`);
        input.setAttribute('maxlength', 140);
        counter.innerHTML = `${input.value.length}/140`;
    }
    window.onload = () => {updateCounter('draft-habits'); updateCounter('draft-observations')};

    function checkAgeFilterSection() {
        const ageSection = document.getElementById('age-section');
        const ageMonths = document.getElementById('draft-age-months').value;
        const ageYears = document.getElementById('draft-age-years').value;

        if (ageMonths.length <= 0 || ageYears.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, ingrese la edad del perro.'
            }
        } else if (ageMonths <= 0 && ageYears <= 0) {
            return {
                valid: false,
                message: 'El perro debe tener al menos 1 mes de edad.'
            }
        } else if(ageMonths > 360 || ageYears > 30) {
            return {
                valid: false,
                message: 'El perro no puede tener más de 30 años de edad.'
            }
        } else {
            return {
                valid: true,
                message: '',
                values: {
                    ageMonths: ageMonths,
                    ageYears: ageYears
                }
            }
        }
    }

    function checkPersonalityFilterSection() {
        const personalitySection = document.getElementById('personality-section');
        const catFriendly = document.getElementById('draft-cat-friendly-dropdown').value;
        const dogFriendly = document.getElementById('draft-dog-friendly-dropdown').value;
        const childFriendly = document.getElementById('draft-child-friendly-dropdown').value;

        document.getElementById('draft-cat-friendly-dropdown').selected = document.getElementById('draft-cat-friendly-dropdown').defaultSelected;

        console.log(catFriendly, dogFriendly, childFriendly);
        
        if(catFriendly.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione si el perro es amigable con los gatos.'
            }
        } else if(dogFriendly.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione si el perro es amigable con otros perros.'
            }
        } else if(childFriendly.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione si el perro es amigable con los niños.'
            }
        } else {
            return {
                valid: true,
                message: '',
                values: {
                    catFriendly: catFriendly,
                    dogFriendly: dogFriendly,
                    childFriendly: childFriendly
                }
            }
        }
    }

    function checkPhysicalCharacteristicsFilterSection() {
        const physicalCharacteristicsSection = document.getElementById('physical-characteristics-section');
        const sex = document.getElementById('draft-sex-dropdown').value;
        const color = document.getElementById('draft-color-dropdown').value;
        const size = document.getElementById('draft-size-dropdown').value;
        const weight = document.getElementById('draft-weight-input').value;
        const breed = document.getElementById('draft-breed-input').value;

        if(sex.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione el sexo del perro.'
            }
        } else if(color.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione el color del perro.'
            }
        } else if(size.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione el tamaño del perro.'
            }
        }else if(weight.length <= 0){
            return {
                valid: false,
                message: 'Por favor, ingrese el peso del perro.'
            }
        }else if(weight > 99){
            return {
                valid: false,
                message: 'El peso del perro no puede ser mayor a 99 kg.'
            }
        } else if(weight <= 0){
            return {
                valid: false,
                message: 'El peso del perro debe ser mayor a 0 kg.'
            }
        }else if(breed.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, ingrese la raza del perro.'
            }
        } else if(!window.breeds.includes(breed)) {
            return {
                valid: false,
                message: 'Por favor, ingrese una raza válida.'
            }
        } else {
            return {
                valid: true,
                message: '',
                values: {
                    sex: sex,
                    color: color,
                    size: size,
                    weight: weight,
                    breed: breed
                }
            }
        }
    }

    function checkHealthFilterSection() {
        const healthSection = document.getElementById('health-section');
        const vaccinated = document.getElementById('draft-vaccinated-dropdown').value;
        const dewormed = document.getElementById('draft-dewormed-dropdown').value;
        const castrated = document.getElementById('draft-castrated-dropdown').value;

        if(vaccinated.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione si el perro está vacunado.'
            }
        } else if(dewormed.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione si el perro está desparasitado.'
            }
        } else if(castrated.length <= 0) {
            return {
                valid: false,
                message: 'Por favor, seleccione si el perro está castrado.'
            }
        } else {
            return {
                valid: true,
                message: '',
                values: {
                    vaccinated: vaccinated,
                    dewormed: dewormed,
                    castrated: castrated
                }
            }
        }
    }
    
    function checkHabitsFilterSection() {
        const habitsSection = document.getElementById('habits-section');
        const habits = document.getElementById('draft-habits-input').value;

        if(habits.length <= 30) {
            return {
                valid: false,
                message: 'Por favor, ingrese al menos 30 caracteres en los hábitos del perro.'
            }
        } else if(habits.length > 140) {
            return {
                valid: false,
                message: 'El campo de hábitos no puede tener más de 140 caracteres.'
            }
        } else {
            return {
                valid: true,
                message: '',
                values: {
                    habits: habits
                }
            }
        }
    }

    function checkObservationsFilterSection() {
        const observationsSection = document.getElementById('observations-section');
        const observations = document.getElementById('draft-observations-input').value;

        if(observations.length <= 30) {
            return {
                valid: false,
                message: 'Por favor, ingrese al menos 30 caracteres en las observaciones del perro.'
            }
        } else if(observations.length > 140) {
            return {
                valid: false,
                message: 'El campo de observaciones no puede tener más de 140 caracteres.'
            }
        } else {
            return {
                valid: true,
                message: '',
                values: {
                    observations: observations
                }
            }
        }
    }
</script>

<script>
    const updateDraft = (draftId) => {
        const checks = [
            checkAgeFilterSection(),
            checkPersonalityFilterSection(),
            checkPhysicalCharacteristicsFilterSection(),
            checkHealthFilterSection(),
            checkHabitsFilterSection(),
            checkObservationsFilterSection()
        ];
        
        let allValid = true;

        const allValuesFromChecksObj = checks.reduce((acc, check) => {
            if(!check.valid) {
                allValid = false;
                return acc;
            } else {
                return {
                    ...acc,
                    ...check.values
                }
            }
        }, {});

        console.log(allValuesFromChecksObj);

        checks.every(check => {
            if(!check.valid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: check.message
                });
                allValid = false;
                return false;
            }
            return true;
        });


        if(allValid) {
            Swal.fire({
                title: 'Actualizando borrador',
                text: 'Esperá un momento',
                didOpen: () => {
                    Swal.showLoading();
                },
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
            });

            axios.post(`https://${window.location.host}/update/publication/draft/${draftId}/`, {
                filters: allValuesFromChecksObj
            }).then(res => {
                if(res.status === 200){
                    window.location.reload();
                }else{
                    Swal.fire({
                        type: 'error',
                        title: 'Oops...',
                        text: 'Algo salió mal, intenta de nuevo',
                        confirmButtonColor: '#079292'
                    });
                }
            }).catch(err => {
                console.log(err);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Algo salió mal, intenta de nuevo',
                    confirmButtonColor: '#079292'
                });
            });
        }else{
        }
    };
</script>